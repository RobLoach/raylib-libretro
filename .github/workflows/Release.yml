on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Upload Release Asset

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Install Dependencies
      run: sudo apt-get install xorg-dev libglu1-mesa-dev
    - name: Configure
      run: cmake -DCMAKE_BUILD_TYPE=RELEASE -B build .
    - name: Build
      run: cmake --build build

    - name: Build project # This would actually build your project, using zip for an example artifact
      run: |
        zip --junk-paths raylib-libretro-linux build/raylib-libretro README.md LICENSE

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./raylib-libretro-linux.zip
        asset_name: raylib-libretro-linux.zip
        asset_content_type: application/zip


  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Configure
      run: cmake -DCMAKE_BUILD_TYPE=RELEASE -B build .
    - name: Build
      run: cmake --build build

    - name: Build project # This would actually build your project, using zip for an example artifact
      run: |
        zip --junk-paths raylib-libretro-windows build/raylib-libretro.exe README.md LICENSE

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./raylib-libretro-windows.zip
        asset_name: raylib-libretro-windows.zip
        asset_content_type: application/zip
